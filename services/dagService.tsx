import { buildUrl } from "./api";
import { URLS } from "./url";
import { DAGStatusResponse } from "./interface";

// Define the DAG type if not already defined
export interface DAG {
  id?: number;               // optional: set by backend
  dag_id?: string;           // optional: generated by backend
  name: string;
  created_at?: string;
  updated_at?: string;
  schedule?: string | null;
  active: boolean;
  dag_sequence: object[];
  active_dag_run?: number | null;
}


export async function fetchDAGs(): Promise<DAG[] | null> {
  try {
    const res = await fetch(buildUrl(URLS.listCreateDAGs));
    if (!res.ok) throw new Error("Failed to fetch DAGs");
    return await res.json();
  } catch (error) {
    console.error(error);
    return null;
  }
}

export async function createDAG(newDAG: DAG): Promise<DAG | null> {
  try {
    // --- Add these logs ---
    console.log("dagService: Object received by createDAG function:", newDAG);
    const requestBody = JSON.stringify(newDAG);
    console.log("dagService: JSON string being sent to API:", requestBody);
    // --- End log ---

    const res = await fetch(buildUrl(URLS.listCreateDAGs), {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: requestBody, // Use the logged string
    });
    if (!res.ok) throw new Error("Failed to create DAG");
    return await res.json(); // This will include the new `dag_id`
  } catch (error) {
    console.error(error);
    return null;
  }
}

export async function updateDAG(
  dagId: string,
  updatedDAG: DAG
): Promise<DAG | null> {
  try {
    const res = await fetch(buildUrl(URLS.manageDAG(dagId)), {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedDAG),
    });
    if (!res.ok) throw new Error("Failed to update DAG");
    return await res.json();
  } catch (error) {
    console.error(error);
    return null;
  }
}

export async function deleteDAG(dagId: string): Promise<boolean> {
  try {
    const res = await fetch(buildUrl(URLS.manageDAG(dagId)), {
      method: "DELETE",
    });
    if (!res.ok) throw new Error("Failed to delete DAG");
    return true;
  } catch (error) {
    console.error(error);
    return false;
  }
}



// import { buildUrl } from "./api";
// import { URLS } from "./url";


export async function getDAGStatus(dagId: string, triggerId: string): Promise<DAGStatusResponse | null> {
  try {
    const res = await fetch(buildUrl(URLS.getDAGStatus(dagId, triggerId)));

    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(`Get DAG status failed: ${res.status} ${errorText}`);
    }

    return await res.json();
  } catch (error) {
    console.error(`Error getting DAG status for dagId=${dagId}, triggerId=${triggerId}:`, error);
    return null;
  }
}
