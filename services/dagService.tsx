import { buildUrl } from "./api";
import { URLS } from "./url";

// Define the DAG type if not already defined
export interface DAG {
  id?: number;               // optional: set by backend
  dag_id?: string;           // optional: generated by backend
  name: string;
  created_at?: string;
  updated_at?: string;
  schedule?: string | null;
  active: boolean;
  dag_sequence: object[];    // or better: define the object structure
  active_dag_run?: number | null;
}


export async function fetchDAGs(): Promise<DAG[] | null> {
  try {
    const res = await fetch(buildUrl(URLS.listCreateDAGs));
    if (!res.ok) throw new Error("Failed to fetch DAGs");
    return await res.json();
  } catch (error) {
    console.error(error);
    return null;
  }
}

export async function createDAG(newDAG: DAG): Promise<DAG | null> {
  try {
    const res = await fetch(buildUrl(URLS.listCreateDAGs), {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newDAG),
    });
    if (!res.ok) throw new Error("Failed to create DAG");
    return await res.json(); // This will include the new `dag_id`
  } catch (error) {
    console.error(error);
    return null;
  }
}

export async function updateDAG(
  dagId: string,
  updatedDAG: DAG
): Promise<DAG | null> {
  try {
    const res = await fetch(buildUrl(URLS.manageDAG(dagId)), {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedDAG),
    });
    if (!res.ok) throw new Error("Failed to update DAG");
    return await res.json();
  } catch (error) {
    console.error(error);
    return null;
  }
}

export async function deleteDAG(dagId: string): Promise<boolean> {
  try {
    const res = await fetch(buildUrl(URLS.manageDAG(dagId)), {
      method: "DELETE",
    });
    if (!res.ok) throw new Error("Failed to delete DAG");
    return true;
  } catch (error) {
    console.error(error);
    return false;
  }
}
