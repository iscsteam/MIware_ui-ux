import { baseUrl } from "./api"
import { URLS } from "./url"
import type { DAGStatusResponse } from "./interface"

// Define the DAG type if not already defined
export interface DAG {
  id?: number // optional: set by backend
  dag_id?: string // optional: generated by backend
  name: string
  created_at?: string
  updated_at?: string
  schedule?: string | null
  active: boolean
  dag_sequence: object[]
  active_dag_run?: number | null
}

// Interface for stop DAG response
export interface StopDAGResponse {
  success: boolean
  message?: string
  dag_id?: string
  stopped_at?: string
}

export async function fetchDAGs(): Promise<DAG[] | null> {
  try {
    const res = await fetch(baseUrl(URLS.listCreateDAGs))
    if (!res.ok) throw new Error("Failed to fetch DAGs")
    return await res.json()
  } catch (error) {
    console.error(error)
    return null
  }
}

export async function createDAG(newDAG: DAG): Promise<DAG | null> {
  try {
    // --- Add these logs ---
    console.log("dagService: Object received by createDAG function:", newDAG)
    const requestBody = JSON.stringify(newDAG)
    console.log("dagService: JSON string being sent to API:", requestBody)
    // --- End log ---

    const res = await fetch(baseUrl(URLS.listCreateDAGs), {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: requestBody, // Use the logged string
    })
    if (!res.ok) throw new Error("Failed to create DAG")
    return await res.json() // This will include the new `dag_id`
  } catch (error) {
    console.error(error)
    return null
  }
}

export async function updateDAG(dagId: string, updatedDAG: DAG): Promise<DAG | null> {
  try {
    const res = await fetch(baseUrl(URLS.manageDAG(dagId)), {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedDAG),
    })
    if (!res.ok) throw new Error("Failed to update DAG")
    return await res.json()
  } catch (error) {
    console.error(error)
    return null
  }
}

export async function deleteDAG(dagId: string): Promise<boolean> {
  try {
    const res = await fetch(baseUrl(URLS.manageDAG(dagId)), {
      method: "DELETE",
    })
    if (!res.ok) throw new Error("Failed to delete DAG")
    return true
  } catch (error) {
    console.error(error)
    return false
  }
}

export async function getDAGById(dagId: string): Promise<DAG | null> {
  try {
    const res = await fetch(baseUrl(URLS.manageDAG(dagId)))
    if (!res.ok) {
      const errorText = await res.text()
      console.error(`Failed to fetch DAG with ID ${dagId}. Status: ${res.status}. Response: ${errorText}`)
      throw new Error(`Failed to fetch DAG with ID ${dagId}. Status: ${res.status}`)
    }
    return await res.json()
  } catch (error) {
    console.error("Error in getDAGById:", error)
    throw error // Re-throw to allow handling by the caller
  }
}

export async function checkDAGRunStatus(dagId: string, triggerId: string): Promise<DAGStatusResponse | null> {
  try {
    const res = await fetch(baseUrl(URLS.getDAGStatus(dagId, triggerId)))

    if (!res.ok) {
      const errorText = await res.text()
      throw new Error(`Get DAG status failed: ${res.status} ${errorText}`)
    }

    return await res.json()
  } catch (error) {
    console.error(`Error getting DAG status for dagId=${dagId}, triggerId=${triggerId}:`, error)
    return null
  }
}

/**
 * Stop the active DAG run for a given DAG ID
 * @param dagId - The dynamic DAG ID to stop
 * @returns Promise<StopDAGResponse | null>
 */
export async function stopActiveDAGRun(dagId: string): Promise<StopDAGResponse | null> {
  try {
    console.log(`dagService: Attempting to stop active DAG run for dagId: ${dagId}`)

    const res = await fetch(baseUrl(URLS.stopActiveDAGRun(dagId)), {
      method: "POST",
      headers: { "Content-Type": "application/json" },
    })

    if (!res.ok) {
      const errorText = await res.text()
      console.error(`Failed to stop DAG run for ${dagId}. Status: ${res.status}. Response: ${errorText}`)
      throw new Error(`Failed to stop DAG run: ${res.status} ${errorText}`)
    }

    const response = await res.json()
    console.log(`dagService: Successfully stopped DAG run for ${dagId}:`, response)

    return {
      success: true,
      message: response.message || "DAG run stopped successfully",
      dag_id: dagId,
      stopped_at: response.stopped_at || new Date().toISOString(),
      ...response,
    }
  } catch (error) {
    console.error(`Error stopping DAG run for dagId=${dagId}:`, error)
    return {
      success: false,
      message: error instanceof Error ? error.message : "Unknown error occurred while stopping DAG",
      dag_id: dagId,
    }
  }
}

/**
 * Helper function to get current workflow ID from localStorage
 * @returns string | null - The current workflow dag_id or null if not found
 */
export function getCurrentWorkflowId(): string | null {
  try {
    const currentWorkflow = localStorage.getItem("currentWorkflow")
    if (currentWorkflow) {
      const workflow = JSON.parse(currentWorkflow)
      return workflow.dag_id || null
    }
    return null
  } catch (error) {
    console.error("Error getting current workflow ID:", error)
    return null
  }
}

/**
 * Stop the currently active workflow (gets ID from localStorage)
 * @returns Promise<StopDAGResponse | null>
 */
export async function stopCurrentWorkflow(): Promise<StopDAGResponse | null> {
  const currentDagId = getCurrentWorkflowId()

  if (!currentDagId) {
    console.error("No current workflow ID found in localStorage")
    return {
      success: false,
      message: "No active workflow found to stop",
      dag_id: undefined,
    }
  }

  return await stopActiveDAGRun(currentDagId)
}

